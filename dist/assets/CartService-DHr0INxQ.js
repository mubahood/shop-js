var t=(t,r,e)=>new Promise(((a,i)=>{var n=t=>{try{c(e.next(t))}catch(r){i(r)}},s=t=>{try{c(e.throw(t))}catch(r){i(r)}},c=t=>t.done?a(t.value):Promise.resolve(t.value).then(n,s);c((e=e.apply(t,r)).next())}));import{K as r,T as e,P as a,h as i}from"./index-nWNd2qXB.js";const n=[];class s{static onCartUpdate(t){return n.push(t),()=>{const r=n.indexOf(t);r>-1&&n.splice(r,1)}}static notifyListeners(){const t=this.getCartItems();n.forEach((r=>{try{r(t)}catch(e){}})),window.dispatchEvent(new CustomEvent("cartUpdated",{detail:{items:t,count:t.length}}))}static getCartItems(){try{const t=localStorage.getItem(r);return t?JSON.parse(t):[]}catch(t){return[]}}static saveCartItems(t){try{localStorage.setItem(r,JSON.stringify(t)),this.notifyListeners()}catch(a){e.error("Failed to save cart")}}static addToCart(t,r=1,a={},i){try{const n=this.getCartItems(),s=JSON.stringify(a),c=n.findIndex((r=>r.product_id===t&&JSON.stringify(r.variant)===s));if(c>=0)n[c].quantity+=r,e.success(`Updated ${(null==i?void 0:i.name)||"product"} quantity in cart`);else{const s={product_id:t,quantity:r,variant:a,added_at:(new Date).toISOString(),price:null==i?void 0:i.price,product_name:null==i?void 0:i.name};n.push(s),e.addToCart((null==i?void 0:i.name)||"Product")}return this.saveCartItems(n),!0}catch(n){return e.error("Failed to add to cart"),!1}}static updateCartItem(t,r,a={}){try{const i=this.getCartItems(),n=JSON.stringify(a),s=i.findIndex((r=>r.product_id===t&&JSON.stringify(r.variant)===n));return s>=0&&(r<=0?(i.splice(s,1),e.removeFromCart(i[s].product_name||"Product")):i[s].quantity=r,this.saveCartItems(i),!0)}catch(i){return e.error("Failed to update cart"),!1}}static removeFromCart(t,r={}){try{const a=this.getCartItems(),i=JSON.stringify(r),n=a.findIndex((r=>r.product_id===t&&JSON.stringify(r.variant)===i));if(n>=0){const t=a[n];return a.splice(n,1),this.saveCartItems(a),e.removeFromCart(t.product_name||"Product"),!0}return!1}catch(a){return e.error("Failed to remove from cart"),!1}}static clearCart(){try{return localStorage.removeItem(r),e.success("Cart cleared"),!0}catch(t){return e.error("Failed to clear cart"),!1}}static getDetailedCartItems(){return t(this,null,(function*(){const t=this.getCartItems(),r=[];for(const i of t)try{const t=yield a.fetchProductById(i.product_id),e=parseFloat(t.price_1)*i.quantity;r.push({product:t,quantity:i.quantity,variant:i.variant,added_at:i.added_at,subtotal:e})}catch(e){this.removeFromCart(i.product_id,i.variant)}return r}))}static getCartTotal(){return t(this,null,(function*(){return(yield this.getDetailedCartItems()).reduce(((t,r)=>t+r.subtotal),0)}))}static getFormattedCartTotal(){return t(this,null,(function*(){const t=yield this.getCartTotal();return i.moneyFormat(String(t))}))}static getCartItemCount(){return this.getCartItems().reduce(((t,r)=>t+r.quantity),0)}static isInCart(t,r={}){const e=this.getCartItems(),a=JSON.stringify(r);return e.some((r=>r.product_id===t&&JSON.stringify(r.variant)===a))}static getProductQuantity(t,r={}){const e=this.getCartItems(),a=JSON.stringify(r),i=e.find((r=>r.product_id===t&&JSON.stringify(r.variant)===a));return i?i.quantity:0}static syncWithServer(){return t(this,null,(function*(){try{return!0}catch(t){return!1}}))}static mergeGuestCart(r){return t(this,null,(function*(){try{const t=this.getCartItems(),a=[...r];for(const r of t){const t=JSON.stringify(r.variant),e=a.findIndex((e=>e.product_id===r.product_id&&JSON.stringify(e.variant)===t));e>=0?a[e].quantity+=r.quantity:a.push(r)}return this.saveCartItems(a),e.success("Cart synced successfully"),!0}catch(t){return e.error("Failed to sync cart"),!1}}))}static validateCart(){return t(this,null,(function*(){try{const r=this.getCartItems(),i=[];let n=!1;for(const e of r)try{const t=yield a.fetchProductById(e.product_id);t.isActive()&&t.isInStock()?i.push(e):n=!0}catch(t){n=!0}return n&&(this.saveCartItems(i),e.warning("Some items were removed from cart as they're no longer available")),!0}catch(t){return!1}}))}}export{s as C};
